"""
This type stub file was generated by pyright.
"""

import re
import six
from bs4 import BeautifulSoup, Comment, Doctype, NavigableString
from textwrap import fill

convert_heading_re = ...
line_beginning_re = ...
whitespace_re = ...
all_whitespace_re = ...
newline_whitespace_re = ...
html_heading_re = ...
ATX = ...
ATX_CLOSED = ...
UNDERLINED = ...
SETEXT = ...
SPACES = ...
BACKSLASH = ...
ASTERISK = ...
UNDERSCORE = ...
def chomp(text): # -> tuple[Literal[' ', ''], Literal[' ', ''], Any]:
    """
    If the text in an inline tag like b, a, or em contains a leading or trailing
    space, strip the string and return a space as suffix of prefix, if needed.
    This function is used to prevent conversions like
        <b> foo</b> => ** foo**
    """
    ...

def abstract_inline_conversion(markup_fn): # -> Callable[..., Any | LiteralString | Literal['']]:
    """
    This abstracts all simple inline tags like b, em, del, ...
    Returns a function that wraps the chomped text in a pair of the string
    that is returned by markup_fn, with '/' inserted in the string used after
    the text if it looks like an HTML tag. markup_fn is necessary to allow for
    references to self.strong_em_symbol etc.
    """
    ...

def should_remove_whitespace_inside(el): # -> bool:
    """Return to remove whitespace immediately inside a block-level element."""
    ...

def should_remove_whitespace_outside(el): # -> Literal[True]:
    """Return to remove whitespace immediately outside a block-level element."""
    ...

class MarkdownConverter:
    class DefaultOptions:
        autolinks = ...
        bullets = ...
        code_language = ...
        code_language_callback = ...
        convert = ...
        default_title = ...
        escape_asterisks = ...
        escape_underscores = ...
        escape_misc = ...
        heading_style = ...
        keep_inline_images_in = ...
        newline_style = ...
        strip = ...
        strong_em_symbol = ...
        sub_symbol = ...
        sup_symbol = ...
        wrap = ...
        wrap_width = ...


    class Options(DefaultOptions):
        ...


    def __init__(self, **options) -> None:
        ...

    def convert(self, html): # -> Any | str:
        ...

    def convert_soup(self, soup): # -> Any | str:
        ...

    def process_tag(self, node, convert_as_inline, children_only=...): # -> Any | str:
        ...

    def process_text(self, el): # -> str:
        ...

    def __getattr__(self, attr): # -> Callable[..., Any | LiteralString | str]:
        ...

    def should_convert_tag(self, tag): # -> bool:
        ...

    def escape(self, text): # -> str:
        ...

    def indent(self, text, columns): # -> str:
        ...

    def underline(self, text, pad_char): # -> LiteralString | Literal['']:
        ...

    def convert_a(self, el, text, convert_as_inline): # -> LiteralString | Literal['']:
        ...

    convert_b = ...
    def convert_blockquote(self, el, text, convert_as_inline): # -> str:
        ...

    def convert_br(self, el, text, convert_as_inline): # -> Literal['', '\\\n', '  \n']:
        ...

    def convert_code(self, el, text, convert_as_inline): # -> LiteralString | Literal['']:
        ...

    convert_del = ...
    convert_em = ...
    convert_kbd = ...
    def convert_hr(self, el, text, convert_as_inline): # -> Literal['\n\n---\n\n']:
        ...

    convert_i = ...
    def convert_img(self, el, text, convert_as_inline): # -> LiteralString | Literal['']:
        ...

    def convert_list(self, el, text, convert_as_inline):
        ...

    convert_ul = ...
    convert_ol = ...
    def convert_li(self, el, text, convert_as_inline): # -> Any | LiteralString:
        ...

    def convert_p(self, el, text, convert_as_inline): # -> LiteralString | Literal['']:
        ...

    def convert_pre(self, el, text, convert_as_inline): # -> LiteralString | Literal['']:
        ...

    def convert_script(self, el, text, convert_as_inline): # -> Literal['']:
        ...

    def convert_style(self, el, text, convert_as_inline): # -> Literal['']:
        ...

    convert_s = ...
    convert_strong = ...
    convert_samp = ...
    convert_sub = ...
    convert_sup = ...
    def convert_table(self, el, text, convert_as_inline):
        ...

    def convert_caption(self, el, text, convert_as_inline):
        ...

    def convert_figcaption(self, el, text, convert_as_inline):
        ...

    def convert_td(self, el, text, convert_as_inline):
        ...

    def convert_th(self, el, text, convert_as_inline):
        ...

    def convert_tr(self, el, text, convert_as_inline):
        ...



def markdownify(html, **options): # -> Any | str:
    ...

