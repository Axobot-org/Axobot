"""
This type stub file was generated by pyright.
"""

from contextlib import AbstractContextManager
from typing import Any, Callable, MutableMapping, Optional, Protocol, TypeVar

__all__ = ["cached"]
_KT = TypeVar("_KT")
_T = TypeVar("_T")
class IdentityFunction(Protocol):
    """
    Type for a function returning the same type as the one it received.
    """
    def __call__(self, __x: _T) -> _T:
        ...



class NullContext:
    """A class for noop context managers."""
    def __enter__(self): # -> Self:
        """Return ``self`` upon entering the runtime context."""
        ...

    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        """Raise any exception triggered within the runtime context."""
        ...

    async def __aenter__(self): # -> Self:
        """Return ``self`` upon entering the runtime context."""
        ...

    async def __aexit__(self, exc_type, exc_value, traceback): # -> None:
        """Raise any exception triggered within the runtime context."""
        ...



def cached(cache: Optional[MutableMapping[_KT, Any]], key: Callable[..., _KT] = ..., lock: Optional[AbstractContextManager[Any]] = ...) -> IdentityFunction:
    """
    Decorator to wrap a function or a coroutine with a memoizing callable
    that saves results in a cache.

    When ``lock`` is provided for a standard function, it's expected to
    implement ``__enter__`` and ``__exit__`` that will be used to lock
    the cache when gets updated. If it wraps a coroutine, ``lock``
    must implement ``__aenter__`` and ``__aexit__``.
    """
    ...

def cachedmethod(cache: Callable[[Any], Optional[MutableMapping[_KT, Any]]], key: Callable[..., _KT] = ..., lock: Optional[Callable[[Any], AbstractContextManager[Any]]] = ...) -> IdentityFunction:
    """Decorator to wrap a class or instance method with a memoizing
    callable that saves results in a cache. This works similarly to
    `cached`, but the arguments `cache` and `lock` are callables that
    return the cache object and the lock respectively.
    """
    ...

