"""
This type stub file was generated by pyright.
"""

from .namespaces import _base, cc, dc, georss, itunes, mediarss, psc

class _FeedParserMixin(_base.Namespace, cc.Namespace, dc.Namespace, georss.Namespace, itunes.Namespace, mediarss.Namespace, psc.Namespace):
    namespaces = ...
    _matchnamespaces = ...
    can_be_relative_uri = ...
    can_contain_relative_uris = ...
    can_contain_dangerous_markup = ...
    html_types = ...
    def __init__(self) -> None:
        ...

    def unknown_starttag(self, tag, attrs):
        ...

    def unknown_endtag(self, tag): # -> None:
        ...

    def handle_charref(self, ref): # -> None:
        ...

    def handle_entityref(self, ref): # -> None:
        ...

    def handle_data(self, text, escape=...): # -> None:
        ...

    def handle_comment(self, text): # -> None:
        ...

    def handle_pi(self, text): # -> None:
        ...

    def handle_decl(self, text): # -> None:
        ...

    def parse_declaration(self, i): # -> int:
        ...

    @staticmethod
    def map_content_type(content_type): # -> Literal['text/plain', 'text/html', 'application/xhtml+xml']:
        ...

    def track_namespace(self, prefix, uri): # -> None:
        ...

    def resolve_uri(self, uri): # -> str:
        ...

    @staticmethod
    def decode_entities(element, data):
        ...

    @staticmethod
    def strattrs(attrs): # -> str:
        ...

    def push(self, element, expecting_text): # -> None:
        ...

    def pop(self, element, strip_whitespace=...):
        ...

    def push_content(self, tag, attrs_d, default_content_type, expecting_text): # -> None:
        ...

    def pop_content(self, tag):
        ...

    @staticmethod
    def looks_like_html(s): # -> bool:
        """
        :type s: str
        :rtype: bool
        """
        ...



