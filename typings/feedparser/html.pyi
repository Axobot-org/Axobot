"""
This type stub file was generated by pyright.
"""

from .sgml import *

_cp1252 = ...
class _BaseHTMLProcessor(sgmllib.SGMLParser):
    special = ...
    bare_ampersand = ...
    elements_no_end_tag = ...
    def __init__(self, encoding=..., _type=...) -> None:
        ...

    def reset(self): # -> None:
        ...

    def goahead(self, i):
        ...

    def parse_starttag(self, i):
        ...

    def feed(self, data): # -> None:
        """
        :type data: str
        :rtype: None
        """
        ...

    @staticmethod
    def normalize_attrs(attrs): # -> list[tuple[Any, Any]]:
        """
        :type attrs: List[Tuple[str, str]]
        :rtype: List[Tuple[str, str]]
        """
        ...

    def unknown_starttag(self, tag, attrs): # -> None:
        """
        :type tag: str
        :type attrs: List[Tuple[str, str]]
        :rtype: None
        """
        ...

    def unknown_endtag(self, tag): # -> None:
        """
        :type tag: str
        :rtype: None
        """
        ...

    def handle_charref(self, ref): # -> None:
        """
        :type ref: str
        :rtype: None
        """
        ...

    def handle_entityref(self, ref): # -> None:
        """
        :type ref: str
        :rtype: None
        """
        ...

    def handle_data(self, text): # -> None:
        """
        :type text: str
        :rtype: None
        """
        ...

    def handle_comment(self, text): # -> None:
        """
        :type text: str
        :rtype: None
        """
        ...

    def handle_pi(self, text): # -> None:
        """
        :type text: str
        :rtype: None
        """
        ...

    def handle_decl(self, text): # -> None:
        """
        :type text: str
        :rtype: None
        """
        ...

    _new_declname_match = ...
    @staticmethod
    def convert_charref(name):
        """
        :type name: str
        :rtype: str
        """
        ...

    @staticmethod
    def convert_entityref(name):
        """
        :type name: str
        :rtype: str
        """
        ...

    def output(self): # -> LiteralString:
        """Return processed HTML as a single string.

        :rtype: str
        """
        ...

    def parse_declaration(self, i): # -> int:
        """
        :type i: int
        :rtype: int
        """
        ...



