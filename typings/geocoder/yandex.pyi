"""
This type stub file was generated by pyright.
"""

from geocoder.base import MultipleResultsQuery, OneResult

class YandexResult(OneResult):
    def __init__(self, json_content) -> None:
        ...

    @property
    def lat(self): # -> None:
        ...

    @property
    def lng(self): # -> None:
        ...

    @property
    def bbox(self): # -> dict[str, list[float]] | dict[Any, Any] | None:
        ...

    @property
    def description(self):
        ...

    @property
    def address(self):
        ...

    @property
    def quality(self):
        ...

    @property
    def accuracy(self):
        ...

    @property
    def country(self):
        ...

    @property
    def country_code(self):
        ...

    @property
    def state(self):
        ...

    @property
    def county(self):
        ...

    @property
    def city(self):
        ...

    @property
    def street(self):
        ...

    @property
    def housenumber(self):
        ...



class YandexQuery(MultipleResultsQuery):
    """
    Yandex
    ======
    Yandex (Russian: Яндекс) is a Russian Internet company
    which operates the largest search engine in Russia with
    about 60% market share in that country.

    The Yandex home page has been rated as the most popular website in Russia.

    Params
    ------
    :param location: Your search location you want geocoded.
    :param lang: Chose the following language:
        > ru-RU — Russian (by default)
        > uk-UA — Ukrainian
        > be-BY — Belarusian
        > en-US — American English
        > en-BR — British English
        > tr-TR — Turkish (only for maps of Turkey)
    :param kind: Type of toponym (only for reverse geocoding):
        > house - house or building
        > street - street
        > metro - subway station
        > district - city district
        > locality - locality (city, town, village, etc.)

    References
    ----------
    API Reference: http://api.yandex.com/maps/doc/geocoder/desc/concepts/input_params.xml
    """
    provider = ...
    method = ...
    _URL = ...
    _RESULT_CLASS = YandexResult
    _KEY_MANDATORY = ...


if __name__ == '__main__':
    g = ...
