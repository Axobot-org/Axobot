"""
This type stub file was generated by pyright.
"""

from collections.abc import MutableSequence

is_python2 = ...
if is_python2:
    class MutableSequence:
        def index(self, v, **kwargs):
            ...

        def count(self, v):
            ...

        def pop(self, i=...):
            ...

        def remove(self, v): # -> None:
            ...

        def __iter__(self):
            ...

        def __contains__(self, v):
            ...

        def __eq__(self, other) -> bool:
            ...



else:
    ...
LOGGER = ...
class OneResult:
    """ Container for one (JSON) object returned by the various web services"""
    _TO_EXCLUDE = ...
    def __init__(self, json_content) -> None:
        ...

    @property
    def lat(self): # -> Literal['']:
        ...

    @property
    def lng(self): # -> Literal['']:
        ...

    @property
    def accuracy(self): # -> Literal['']:
        ...

    @property
    def quality(self): # -> Literal['']:
        ...

    @property
    def bbox(self): # -> dict[Any, Any]:
        ...

    @property
    def address(self): # -> Literal['']:
        ...

    @property
    def housenumber(self): # -> Literal['']:
        ...

    @property
    def street(self): # -> Literal['']:
        ...

    @property
    def city(self): # -> Literal['']:
        ...

    @property
    def state(self): # -> Literal['']:
        ...

    @property
    def country(self): # -> Literal['']:
        ...

    @property
    def postal(self): # -> Literal['']:
        ...

    def __repr__(self): # -> str | LiteralString:
        """ Display [address] if available; [lat,lng] otherwise"""
        ...

    @property
    def ok(self): # -> bool:
        ...

    @property
    def status(self): # -> Literal['OK', 'ERROR - No results found', 'ERROR - No Geometry']:
        ...

    def debug(self, verbose=...): # -> list[int]:
        ...

    @property
    def confidence(self): # -> int:
        ...

    @property
    def geometry(self): # -> dict[str, str | list[str]] | dict[Any, Any]:
        ...

    @property
    def osm(self): # -> dict[Any, Any]:
        ...

    @property
    def geojson(self): # -> dict[str, str | dict[Any, Any]]:
        ...

    @property
    def wkt(self): # -> LiteralString | Literal['']:
        ...

    @property
    def xy(self): # -> list[str] | list[Any]:
        ...

    @property
    def latlng(self): # -> list[str] | list[Any]:
        ...

    @property
    def y(self): # -> Literal['']:
        ...

    @property
    def x(self): # -> Literal['']:
        ...

    @property
    def locality(self): # -> Literal['']:
        ...

    @property
    def province(self): # -> Literal['']:
        ...

    @property
    def street_number(self): # -> Literal['']:
        ...

    @property
    def road(self): # -> Literal['']:
        ...

    @property
    def route(self): # -> Literal['']:
        ...



class MultipleResultsQuery(MutableSequence):
    """ Will replace the Base class to support multiple results, with the following differences :

        - split class into 2 parts :
            - OneResult to actually store a (JSON) object from provider
            - MultipleResultsQuery to manage the query

        - class variables moved into instance
        - remaining class variables are names with convention: _CAPITALS
        - self.url derived from class var cls.URL, which must be a valid URL
        - self.timeout has default value from class var cls.TIMEOUT
    """
    _URL = ...
    _RESULT_CLASS = ...
    _KEY = ...
    _KEY_MANDATORY = ...
    _TIMEOUT = ...
    def __init__(self, location, **kwargs) -> None:
        ...

    def __getitem__(self, key):
        ...

    def __setitem__(self, key, value): # -> None:
        ...

    def __delitem__(self, key): # -> None:
        ...

    def __len__(self): # -> int:
        ...

    def insert(self, index, value): # -> None:
        ...

    def add(self, value): # -> None:
        ...

    def __repr__(self): # -> str:
        ...

    def rate_limited_get(self, url, **kwargs):
        """ By default, simply wraps a session.get request"""
        ...

    @property
    def ok(self): # -> bool:
        ...

    @property
    def status(self): # -> str | Literal[True]:
        ...

    @property
    def geojson(self): # -> dict[str, str | list[Any]]:
        ...

    def debug(self, verbose=...): # -> list[Any]:
        ...

    def set_default_result(self, index): # -> None:
        """ change the result used to delegate the calls to. The provided index should be in the
            range of results, otherwise it will raise an exception
        """
        ...

    def __getattr__(self, name): # -> Any | None:
        """ Called when an attribute lookup has not found the attribute in the usual places (i.e.
            it is not an instance attribute nor is it found in the class tree for self). name is
            the attribute name. This method should return the (computed) attribute value or raise
            an AttributeError exception.

            Note that if the attribute is found through the normal mechanism, __getattr__() is not called.
        """
        ...



