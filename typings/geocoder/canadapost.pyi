"""
This type stub file was generated by pyright.
"""

from geocoder.base import MultipleResultsQuery, OneResult

class CanadapostIdResult(OneResult):
    @property
    def ok(self): # -> bool:
        ...

    @property
    def item_id(self):
        ...

    @property
    def next_action(self):
        ...



class CanadapostIdQuery(MultipleResultsQuery):
    provider = ...
    method = ...
    _URL = ...
    _RESULT_CLASS = CanadapostIdResult
    _KEY_MANDATORY = ...


class CanadapostResult(OneResult):
    @property
    def ok(self): # -> bool:
        ...

    @property
    def quality(self):
        ...

    @property
    def accuracy(self):
        ...

    @property
    def address(self):
        ...

    @property
    def postal(self):
        ...

    @property
    def housenumber(self):
        ...

    @property
    def street(self):
        ...

    @property
    def city(self):
        ...

    @property
    def state(self):
        ...

    @property
    def country(self):
        ...

    @property
    def unit(self):
        ...

    @property
    def domesticId(self):
        ...

    @property
    def label(self):
        ...



class CanadapostQuery(MultipleResultsQuery):
    """
    Addres Complete API
    =======================
    The next generation of address finders, AddressComplete uses
    intelligent, fast searching to improve data accuracy and relevancy.
    Simply start typing a business name, address or Postal Code
    and AddressComplete will suggest results as you go.

    Params
    ------
    :param ``location``: Your search location you want geocoded.
    :param ``key``: (optional) API Key from CanadaPost Address Complete.
    :param ``language``: (default=en) Output language preference.
    :param ``country``: (default=ca) Geofenced query by country.

    API Reference
    -------------
    https://www.canadapost.ca/pca/
    """
    provider = ...
    method = ...
    _URL = ...
    _RESULT_CLASS = CanadapostResult
    _KEY_MANDATORY = ...
    @property
    def canadapost_api_key(self): # -> str | Any | None:
        ...



if __name__ == '__main__':
    g = ...
