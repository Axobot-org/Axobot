"""
This type stub file was generated by pyright.
"""

from geocoder.base import MultipleResultsQuery, OneResult

class PlacesResult(OneResult):
    def __init__(self, json_content) -> None:
        ...

    @property
    def lat(self):
        ...

    @property
    def lng(self):
        ...

    @property
    def id(self):
        ...

    @property
    def reference(self):
        ...

    @property
    def place_id(self):
        ...

    @property
    def type(self): # -> None:
        ...

    @property
    def address(self):
        ...

    @property
    def icon(self):
        ...

    @property
    def name(self):
        ...

    @property
    def vicinity(self):
        ...

    @property
    def price_level(self):
        ...

    @property
    def rating(self):
        ...



class PlacesQuery(MultipleResultsQuery):
    """
    Google Places API
    ====================
    The Google Places API Web Service allows you to query for place information on a variety of categories,
    such as: establishments, prominent points of interest, geographic locations, and more.
    You can search for places either by proximity or a text string.
    A Place Search returns a list of places along with summary information about each place; additional
    information is available via a Place Details query.

    At this time, only the "Text Search" is supported by this library.  "Text Search" can be used
    when you don't have pristine formatted addresses required by the regular Google Maps Geocoding API
    or when you want to do 'nearby' searches like 'restaurants near Sydney'.

    The Geocoding best practices reference indicates that when you have 'ambiguous queries in an automated system
    you would be better served using the Places API Text Search than the Maps Geocoding API
    https://developers.google.com/maps/documentation/geocoding/best-practices

    API Reference
    -------------
    https://developers.google.com/places/web-service/intro
    https://developers.google.com/places/web-service/search

    l = geocoder.google('Elm Plaza Shopping Center, Enfield, CT 06082', method='places')
    l = geocoder.google('food near white house', method='places')
    l = geocoder.google('1st and main', method='places')

    Parameters
    ----------
    :param location: Your search location or phrase you want geocoded.
    :param key: Your Google developers free key.

    :param proximity: (optional) lat,lng point around which results will be given preference
    :param radius: (optional) in meters, used with proximity
    :param language: (optional) 2-letter code of preferred language of returned address elements.
    :param minprice: (optional) 0 (most affordable) to 4 (most expensive)
    :param maxprice: (optional) 0 (most affordable) to 4 (most expensive)
    :param opennow: (optional) value is ignored. when present, closed places and places without opening hours will be omitted
    :param pagetoken: (optional) get next 20 results from previously run search.  when set, other criteria are ignored
    :param type: (optional) restrict results to one type of place
    """
    provider = ...
    method = ...
    _URL = ...
    _RESULT_CLASS = PlacesResult
    _KEY = ...
    def __init__(self, location, **kwargs) -> None:
        ...

    @property
    def query(self): # -> Any:
        ...



if __name__ == '__main__':
    g = ...
