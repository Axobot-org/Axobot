"""
This type stub file was generated by pyright.
"""

from geocoder.base import MultipleResultsQuery, OneResult

class OpenCageResult(OneResult):
    def __init__(self, json_content) -> None:
        ...

    @property
    def lat(self):
        ...

    @property
    def lng(self):
        ...

    @property
    def address(self):
        ...

    @property
    def housenumber(self):
        ...

    @property
    def house_aliases(self): # -> None:
        ...

    @property
    def house(self): # -> None:
        ...

    @property
    def building(self): # -> None:
        ...

    @property
    def public_building(self): # -> None:
        ...

    @property
    def street_aliases(self): # -> None:
        ...

    @property
    def street(self): # -> None:
        ...

    @property
    def footway(self): # -> None:
        ...

    @property
    def road(self): # -> None:
        ...

    @property
    def street_name(self): # -> None:
        ...

    @property
    def residential(self): # -> None:
        ...

    @property
    def path(self): # -> None:
        ...

    @property
    def pedestrian(self): # -> None:
        ...

    @property
    def neighbourhood_aliases(self): # -> None:
        ...

    @property
    def neighbourhood(self): # -> None:
        ...

    @property
    def suburb(self): # -> None:
        ...

    @property
    def city_district(self): # -> None:
        ...

    @property
    def city_aliases(self): # -> None:
        ...

    @property
    def city(self): # -> None:
        ...

    @property
    def town(self): # -> None:
        ...

    @property
    def county(self):
        ...

    @property
    def village_aliases(self): # -> None:
        ...

    @property
    def village(self): # -> None:
        ...

    @property
    def hamlet(self): # -> None:
        ...

    @property
    def locality(self): # -> None:
        ...

    @property
    def state_aliases(self): # -> None:
        ...

    @property
    def state(self): # -> None:
        ...

    @property
    def province(self): # -> None:
        ...

    @property
    def state_code(self): # -> None:
        ...

    @property
    def state_district(self):
        ...

    @property
    def country(self):
        ...

    @property
    def country_code(self):
        ...

    @property
    def postal(self):
        ...

    @property
    def postcode(self):
        ...

    @property
    def continent(self):
        ...

    @property
    def island(self):
        ...

    @property
    def region(self):
        ...

    @property
    def confidence(self):
        ...

    @property
    def w3w(self):
        ...

    @property
    def mgrs(self):
        ...

    @property
    def geohash(self):
        ...

    @property
    def callingcode(self):
        ...

    @property
    def Maidenhead(self):
        ...

    @property
    def DMS(self):
        ...

    @property
    def Mercator(self):
        ...

    @property
    def bbox(self): # -> dict[str, list[float]] | None:
        ...



class OpenCageQuery(MultipleResultsQuery):
    """
    OpenCage Geocoding Services
    ===========================
    OpenCage Geocoder simple, easy, and open geocoding for the entire world
    Our API combines multiple geocoding systems in the background.
    Each is optimized for different parts of the world and types of requests.
    We aggregate the best results from open data sources and algorithms so you don't have to.
    Each is optimized for different parts of the world and types of requests.

    API Reference
    -------------
    https://geocoder.opencagedata.com/api
    """
    provider = ...
    method = ...
    _URL = ...
    _RESULT_CLASS = OpenCageResult
    _KEY = ...


if __name__ == '__main__':
    g = ...
